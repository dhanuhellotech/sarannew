const Service = require('../Model/Service');
const cloudinary = require('cloudinary').v2; // Assuming you're using Cloudinary v2
const createService = async (req, res) => {
  try {
    const { category, serviceName, image, servicePrice, description, briefDescription, services } = req.body;

    if (services && Array.isArray(services) && services.length > 0) {
      // If 'services' array exists and is not empty, handle multiple services
      const serviceObjects = await Promise.all(services.map(async (service) => {
        const uploadedImage = await cloudinary.uploader.upload(service.image);
        return {
          serviceName: service.serviceName,
          image: uploadedImage.secure_url,
          servicePrice: service.servicePrice,
          description: service.description,
          briefDescription: service.briefDescription
        };
      }));

      // Create a new service document with the array of service objects
      const newService = new Service({
        category,
        services: serviceObjects
      });

      // Save the new service
      const savedService = await newService.save();

      res.status(201).json(savedService);
    } else {
      // If 'services' array is not provided or empty, handle single service
      // Upload image to Cloudinary
      const uploadedImage = await cloudinary.uploader.upload(image);

      // Create a new service document
      const newService = new Service({
        category,
        services: [{
          serviceName,
          image: uploadedImage.secure_url,
          servicePrice,
          description,
          briefDescription
        }]
      });

      // Save the new service
      const savedService = await newService.save();

      res.status(201).json(savedService);
    }
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};
const updateServiceById = async (req, res) => {
  try {
    const { id } = req.params;
    const { category, serviceName, image, servicePrice, description, briefDescription } = req.body;

    // Check if the service exists
    const existingService = await Service.findById(id);
    if (!existingService) {
      return res.status(404).json({ message: 'Service not found' });
    }

    // Upload image to Cloudinary if provided
    let updatedImage = existingService.image;
    if (image) {
      const uploadedImage = await cloudinary.uploader.upload(image);
      updatedImage = uploadedImage.secure_url;
    }

    // Update service fields
    existingService.category = category || existingService.category;
    existingService.serviceName = serviceName || existingService.serviceName;
    existingService.image = updatedImage;
    existingService.servicePrice = servicePrice || existingService.servicePrice;
    existingService.description = description || existingService.description;
    existingService.briefDescription = briefDescription || existingService.briefDescription;

    // Save the updated service
    const updatedService = await existingService.save();

    res.status(200).json(updatedService);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// Controller for getting all services with populated services
const getAllServices = async (req, res) => {
  try {
    const services = await Service.find().populate('services');
    res.status(200).json(services);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// Controller for getting a single service by ID with populated services
const getServiceById = async (req, res) => {
  try {
    const { id } = req.params;
    const service = await Service.findById(id).populate('services');
    if (!service) {
      return res.status(404).json({ message: 'Service not found' });
    }
    res.status(200).json(service);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};
const deleteServiceById = async (req, res) => {
  try {
    const { id } = req.params;

    // Check if the service exists
    const existingService = await Service.findById(id);
    if (!existingService) {
      return res.status(404).json({ message: 'Service not found' });
    }

    // Delete the service
    await existingService.remove();

    res.status(200).json({ message: 'Service deleted successfully' });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

module.exports = {
  createService,
  getAllServices,
  getServiceById,
  updateServiceById,
  deleteServiceById 
};
const express = require('express');
const router = express.Router();
const serviceController = require('../controller/serviceController');

// Route for creating a new service
router.post('/services', serviceController.createService);

// Route for getting all services
router.get('/services', serviceController.getAllServices);

// Route for getting a single service by ID
router.get('/services/:id', serviceController.getServiceById);
router.put('/services/:id', serviceController.updateServiceById);
router.delete('/services/:id', serviceController.deleteServiceById);
module.exports = router;
// routes/serviceRouter.js
const express = require("express");
const router = express.Router();
const serviceController = require("../controller/serviceController");

// Define your service routes here
router.get("/", serviceController.getAllServices);
router.post(
  "/",
  serviceController.uploadImage,
  serviceController.resizeImage,
  serviceController.addImagetoCloud,
  serviceController.createService
);
router.put(
  "/:id/:serId",
  serviceController.uploadImage,
  serviceController.resizeImage,
  serviceController.addImagetoCloud,
  serviceController.updateService
);
router.delete("/:id", serviceController.deleteService);
router.get("/:id", serviceController.getServiceById);

module.exports = router;